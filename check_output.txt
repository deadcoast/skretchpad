
> skretchpad@0.1.0 check
> svelte-check --tsconfig ./tsconfig.json


====================================
Loading svelte-check in workspace: c:\Users\ryanf\github\active\skretchpad
Getting Svelte diagnostics...

c:\Users\ryanf\github\active\skretchpad\[32msrc\components\StatusBar.svelte[39m:108:5
[33mWarn[39m: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
[36m  <div class="plugin-menu" on:click={() => (showPluginMenu = false)}>
    [35m<div class="plugin-menu__content" on:click|stopPropagation>
      <h3 class="plugin-menu__title">Plugins</h3>
      
      <div class="plugin-list">
        {#each Array.from($pluginsStore.plugins.values()) as plugin (plugin.id)}
          <div class="plugin-item" class:plugin-item--active={plugin.state === 'active'}>
            <div class="plugin-item__header">
              <span class="plugin-item__name">{plugin.name}</span>
              <span class="plugin-item__version">{plugin.version}</span>
            </div>
            
            <div class="plugin-item__state">
              <span class="plugin-item__state-indicator" data-state={plugin.state} />
              <span class="plugin-item__state-text">{plugin.state}</span>
            </div>

            {#if plugin.error}
              <div class="plugin-item__error">{plugin.error}</div>
            {/if}

            <div class="plugin-item__actions">
              {#if plugin.state === 'active'}
                <button
                  class="plugin-action"
                  on:click={() => pluginsStore.deactivate(plugin.id)}
                >
                  Deactivate
                </button>
              {:else if plugin.state === 'loaded'}
                <button
                  class="plugin-action"
                  on:click={() => pluginsStore.activate(plugin.id)}
                >
                  Activate
                </button>
              {/if}
              
              <button
                class="plugin-action"
                on:click={() => pluginsStore.reload(plugin.id)}
              >
                Reload
              </button>
            </div>
          </div>
        {/each}
      </div>
    </div[36m>
  </div>
[39m

c:\Users\ryanf\github\active\skretchpad\[32msrc\components\StatusBar.svelte[39m:108:5
[33mWarn[39m: A11y: <div> with click handler must have an ARIA role (svelte)
[36m  <div class="plugin-menu" on:click={() => (showPluginMenu = false)}>
    [35m<div class="plugin-menu__content" on:click|stopPropagation>
      <h3 class="plugin-menu__title">Plugins</h3>
      
      <div class="plugin-list">
        {#each Array.from($pluginsStore.plugins.values()) as plugin (plugin.id)}
          <div class="plugin-item" class:plugin-item--active={plugin.state === 'active'}>
            <div class="plugin-item__header">
              <span class="plugin-item__name">{plugin.name}</span>
              <span class="plugin-item__version">{plugin.version}</span>
            </div>
            
            <div class="plugin-item__state">
              <span class="plugin-item__state-indicator" data-state={plugin.state} />
              <span class="plugin-item__state-text">{plugin.state}</span>
            </div>

            {#if plugin.error}
              <div class="plugin-item__error">{plugin.error}</div>
            {/if}

            <div class="plugin-item__actions">
              {#if plugin.state === 'active'}
                <button
                  class="plugin-action"
                  on:click={() => pluginsStore.deactivate(plugin.id)}
                >
                  Deactivate
                </button>
              {:else if plugin.state === 'loaded'}
                <button
                  class="plugin-action"
                  on:click={() => pluginsStore.activate(plugin.id)}
                >
                  Activate
                </button>
              {/if}
              
              <button
                class="plugin-action"
                on:click={() => pluginsStore.reload(plugin.id)}
              >
                Reload
              </button>
            </div>
          </div>
        {/each}
      </div>
    </div[36m>
  </div>
[39m

c:\Users\ryanf\github\active\skretchpad\[32msrc\components\StatusBar.svelte[39m:107:3
[33mWarn[39m: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
[36m{#if showPluginMenu}
  [35m<div class="plugin-menu" on:click={() => (showPluginMenu = false)}>
    <div class="plugin-menu__content" on:click|stopPropagation>
      <h3 class="plugin-menu__title">Plugins</h3>
      
      <div class="plugin-list">
        {#each Array.from($pluginsStore.plugins.values()) as plugin (plugin.id)}
          <div class="plugin-item" class:plugin-item--active={plugin.state === 'active'}>
            <div class="plugin-item__header">
              <span class="plugin-item__name">{plugin.name}</span>
              <span class="plugin-item__version">{plugin.version}</span>
            </div>
            
            <div class="plugin-item__state">
              <span class="plugin-item__state-indicator" data-state={plugin.state} />
              <span class="plugin-item__state-text">{plugin.state}</span>
            </div>

            {#if plugin.error}
              <div class="plugin-item__error">{plugin.error}</div>
            {/if}

            <div class="plugin-item__actions">
              {#if plugin.state === 'active'}
                <button
                  class="plugin-action"
                  on:click={() => pluginsStore.deactivate(plugin.id)}
                >
                  Deactivate
                </button>
              {:else if plugin.state === 'loaded'}
                <button
                  class="plugin-action"
                  on:click={() => pluginsStore.activate(plugin.id)}
                >
                  Activate
                </button>
              {/if}
              
              <button
                class="plugin-action"
                on:click={() => pluginsStore.reload(plugin.id)}
              >
                Reload
              </button>
            </div>
          </div>
        {/each}
      </div>
    </div>
  </div[36m>
{/if}
[39m

c:\Users\ryanf\github\active\skretchpad\[32msrc\components\StatusBar.svelte[39m:107:3
[33mWarn[39m: A11y: <div> with click handler must have an ARIA role (svelte)
[36m{#if showPluginMenu}
  [35m<div class="plugin-menu" on:click={() => (showPluginMenu = false)}>
    <div class="plugin-menu__content" on:click|stopPropagation>
      <h3 class="plugin-menu__title">Plugins</h3>
      
      <div class="plugin-list">
        {#each Array.from($pluginsStore.plugins.values()) as plugin (plugin.id)}
          <div class="plugin-item" class:plugin-item--active={plugin.state === 'active'}>
            <div class="plugin-item__header">
              <span class="plugin-item__name">{plugin.name}</span>
              <span class="plugin-item__version">{plugin.version}</span>
            </div>
            
            <div class="plugin-item__state">
              <span class="plugin-item__state-indicator" data-state={plugin.state} />
              <span class="plugin-item__state-text">{plugin.state}</span>
            </div>

            {#if plugin.error}
              <div class="plugin-item__error">{plugin.error}</div>
            {/if}

            <div class="plugin-item__actions">
              {#if plugin.state === 'active'}
                <button
                  class="plugin-action"
                  on:click={() => pluginsStore.deactivate(plugin.id)}
                >
                  Deactivate
                </button>
              {:else if plugin.state === 'loaded'}
                <button
                  class="plugin-action"
                  on:click={() => pluginsStore.activate(plugin.id)}
                >
                  Activate
                </button>
              {/if}
              
              <button
                class="plugin-action"
                on:click={() => pluginsStore.reload(plugin.id)}
              >
                Reload
              </button>
            </div>
          </div>
        {/each}
      </div>
    </div>
  </div[36m>
{/if}
[39m

c:\Users\ryanf\github\active\skretchpad\[32msrc\components\StatusBar.svelte[39m:6:3
[31mError[39m: All imports in import declaration are unused. (ts)
[36m  import { editorStore, activeFile } from '$lib/stores/editor';
  [35mimport { formatShortcut, isMac } from '$lib/utils/ui';[36m

[39m

c:\Users\ryanf\github\active\skretchpad\[32msrc\App.svelte[39m:8:3
[31mError[39m: 'keybindingStore' is declared but its value is never read. (ts)
[36m  import { pluginsStore } from './lib/stores/plugins';
  [35mimport { keybindingStore } from './lib/stores/keybindings';[36m

[39m

c:\Users\ryanf\github\active\skretchpad\[32msrc\App.svelte[39m:12:7
[31mError[39m: 'currentFile' is declared but its value is never read. (ts)
[36m  let alwaysOnTop = false;
  let [35mcurrentFile[36m = '';

[39m

c:\Users\ryanf\github\active\skretchpad\[32msrc\lib\codemirror-loader.ts[39m:4:1
[31mError[39m: 'python' is declared but its value is never read. 
[36mimport { EditorState, Compartment } from '@codemirror/state';
[35mimport { python } from '@codemirror/lang-python';[36m
import { rust } from '@codemirror/lang-rust';
[39m

c:\Users\ryanf\github\active\skretchpad\[32msrc\lib\codemirror-loader.ts[39m:5:1
[31mError[39m: 'rust' is declared but its value is never read. 
[36mimport { python } from '@codemirror/lang-python';
[35mimport { rust } from '@codemirror/lang-rust';[36m
import { markdown } from '@codemirror/lang-markdown';
[39m

c:\Users\ryanf\github\active\skretchpad\[32msrc\lib\codemirror-loader.ts[39m:6:1
[31mError[39m: 'markdown' is declared but its value is never read. 
[36mimport { rust } from '@codemirror/lang-rust';
[35mimport { markdown } from '@codemirror/lang-markdown';[36m

[39m

c:\Users\ryanf\github\active\skretchpad\[32msrc\components\CommandPalette.svelte[39m:91:7
[33mWarn[39m: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
[36m    >
      [35m<div class="command-palette" on:click|stopPropagation>
        <input
          bind:this={inputElement}
          bind:value={searchQuery}
          class="command-palette__input"
          placeholder="Type a command..."
          on:keydown={handleKeyDown}
        />
  
        <div class="command-palette__results">
          {#if filteredCommands.length === 0}
            <div class="command-palette__empty">No commands found</div>
          {:else}
            {#each Object.entries(groupedCommands) as [category, commands] (category)}
              <div class="command-category">
                <div class="command-category__title">{category}</div>
  
                {#each commands as command (command.id)}
                  {@const globalIndex = filteredCommands.indexOf(command)}
                  <button
                    class="command-item"
                    class:command-item--selected={globalIndex === selectedIndex}
                    on:click={() => executeCommand(command.id)}
                  >
                    <div class="command-item__content">
                      <span class="command-item__label">{command.label}</span>
                      <span class="command-item__id">{command.id}</span>
                    </div>
  
                    {#if command.keybinding}
                      <div class="command-item__keybinding">
                        {formatShortcut(command.keybinding)}
                      </div>
                    {/if}
                  </button>
                {/each}
              </div>
            {/each}
          {/if}
        </div>
  
        <div class="command-palette__footer">
          <span class="command-palette__hint">↑↓ navigate</span>
          <span class="command-palette__hint">↵ select</span>
          <span class="command-palette__hint">esc close</span>
        </div>
      </div[36m>
    </div>
[39m

c:\Users\ryanf\github\active\skretchpad\[32msrc\components\CommandPalette.svelte[39m:91:7
[33mWarn[39m: A11y: <div> with click handler must have an ARIA role (svelte)
[36m    >
      [35m<div class="command-palette" on:click|stopPropagation>
        <input
          bind:this={inputElement}
          bind:value={searchQuery}
          class="command-palette__input"
          placeholder="Type a command..."
          on:keydown={handleKeyDown}
        />
  
        <div class="command-palette__results">
          {#if filteredCommands.length === 0}
            <div class="command-palette__empty">No commands found</div>
          {:else}
            {#each Object.entries(groupedCommands) as [category, commands] (category)}
              <div class="command-category">
                <div class="command-category__title">{category}</div>
  
                {#each commands as command (command.id)}
                  {@const globalIndex = filteredCommands.indexOf(command)}
                  <button
                    class="command-item"
                    class:command-item--selected={globalIndex === selectedIndex}
                    on:click={() => executeCommand(command.id)}
                  >
                    <div class="command-item__content">
                      <span class="command-item__label">{command.label}</span>
                      <span class="command-item__id">{command.id}</span>
                    </div>
  
                    {#if command.keybinding}
                      <div class="command-item__keybinding">
                        {formatShortcut(command.keybinding)}
                      </div>
                    {/if}
                  </button>
                {/each}
              </div>
            {/each}
          {/if}
        </div>
  
        <div class="command-palette__footer">
          <span class="command-palette__hint">↑↓ navigate</span>
          <span class="command-palette__hint">↵ select</span>
          <span class="command-palette__hint">esc close</span>
        </div>
      </div[36m>
    </div>
[39m

c:\Users\ryanf\github\active\skretchpad\[32msrc\components\CommandPalette.svelte[39m:86:5
[33mWarn[39m: A11y: <div> with click, keydown handlers must have an ARIA role (svelte)
[36m  {#if visible}
    [35m<div
      class="command-palette-backdrop"
      on:click={handleBackdropClick}
      on:keydown={handleKeyDown}
    >
      <div class="command-palette" on:click|stopPropagation>
        <input
          bind:this={inputElement}
          bind:value={searchQuery}
          class="command-palette__input"
          placeholder="Type a command..."
          on:keydown={handleKeyDown}
        />
  
        <div class="command-palette__results">
          {#if filteredCommands.length === 0}
            <div class="command-palette__empty">No commands found</div>
          {:else}
            {#each Object.entries(groupedCommands) as [category, commands] (category)}
              <div class="command-category">
                <div class="command-category__title">{category}</div>
  
                {#each commands as command (command.id)}
                  {@const globalIndex = filteredCommands.indexOf(command)}
                  <button
                    class="command-item"
                    class:command-item--selected={globalIndex === selectedIndex}
                    on:click={() => executeCommand(command.id)}
                  >
                    <div class="command-item__content">
                      <span class="command-item__label">{command.label}</span>
                      <span class="command-item__id">{command.id}</span>
                    </div>
  
                    {#if command.keybinding}
                      <div class="command-item__keybinding">
                        {formatShortcut(command.keybinding)}
                      </div>
                    {/if}
                  </button>
                {/each}
              </div>
            {/each}
          {/if}
        </div>
  
        <div class="command-palette__footer">
          <span class="command-palette__hint">↑↓ navigate</span>
          <span class="command-palette__hint">↵ select</span>
          <span class="command-palette__hint">esc close</span>
        </div>
      </div>
    </div[36m>
  {/if}
[39m

====================================
[31msvelte-check found 6 errors and 7 warnings in 4 files
[39m